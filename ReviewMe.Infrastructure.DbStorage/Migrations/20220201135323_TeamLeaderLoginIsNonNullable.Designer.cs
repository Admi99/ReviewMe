// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReviewMe.Infrastructure.DbStorage;

#nullable disable

namespace ReviewMe.Infrastructure.DbStorage.Migrations
{
    [DbContext(typeof(ReviewMeDbContext))]
    [Migration("20220201135323_TeamLeaderLoginIsNonNullable")]
    partial class TeamLeaderLoginIsNonNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AdditionalFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AssessmentDueDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("AssessmentState")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedByEmployeeDoId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeDoId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PerformanceReviewDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByEmployeeDoId");

                    b.HasIndex("EmployeeDoId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentReviewerDo", b =>
                {
                    b.Property<int>("EmployeeDoId")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentDoId")
                        .HasColumnType("int");

                    b.Property<string>("AreasForImprovements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AssessmentReviewerState")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeDoId", "AssessmentDoId");

                    b.HasIndex("AssessmentDoId");

                    b.ToTable("AssessmentReviewers");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.EmployeeDo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("PerformanceReviewMonth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PpId")
                        .HasColumnType("int");

                    b.Property<string>("SurnameFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamLeaderLogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentDo", b =>
                {
                    b.HasOne("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.EmployeeDo", "CreatedByEmployeeDo")
                        .WithMany("CreatedAssessments")
                        .HasForeignKey("CreatedByEmployeeDoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.EmployeeDo", "EmployeeDo")
                        .WithMany("Assessments")
                        .HasForeignKey("EmployeeDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByEmployeeDo");

                    b.Navigation("EmployeeDo");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentReviewerDo", b =>
                {
                    b.HasOne("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentDo", "AssessmentDo")
                        .WithMany("AssessmentReviewers")
                        .HasForeignKey("AssessmentDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.EmployeeDo", "EmployeeDo")
                        .WithMany("AssessmentReviewers")
                        .HasForeignKey("EmployeeDoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssessmentDo");

                    b.Navigation("EmployeeDo");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.AssessmentDo", b =>
                {
                    b.Navigation("AssessmentReviewers");
                });

            modelBuilder.Entity("ReviewMe.Infrastructure.DbStorage.DatabaseObjects.EmployeeDo", b =>
                {
                    b.Navigation("AssessmentReviewers");

                    b.Navigation("Assessments");

                    b.Navigation("CreatedAssessments");
                });
#pragma warning restore 612, 618
        }
    }
}
